{
    "pipes": [],
    "interfaces": [
        {
            "name": "ICrudService",
            "id": "interface-ICrudService-b8b26c55ec2f346ea379e799ba651aeb",
            "file": "src/app/data-services/base-crud.service.ts",
            "type": "interface",
            "sourceCode": "import {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\n\nexport interface ICrudService<TEntity> {\n  getAll() : Observable<TEntity[]>;\n  get(id: string) : Observable<TEntity>;\n  save(entity: TEntity) : Promise<object>;\n  remove(id: string) : Promise<object>;\n  createSample() : TEntity;\n}\nexport class BaseCrudService<TEntity> implements ICrudService<TEntity> {\n\n  protected baseAddress: string;\n  constructor(protected http: HttpClient, protected endpoint: string) {\n    this.baseAddress = `/api/${this.endpoint}`;\n  }\n\n  getAll() : Observable<TEntity[]> {\n    return this.http.get<TEntity[]>(`${this.baseAddress}/GetAll`);\n  }\n  get(id: string) : Observable<TEntity> {\n    return this.http.get<TEntity>(`${this.baseAddress}/Get?id=${id}`);\n  }\n  save(entity: TEntity) : Promise<object> {\n    return this.http.put(this.baseAddress, entity).toPromise();\n  }\n  remove(id: string) : Promise<object> {\n    return  this.http.delete(`${this.baseAddress}?id=${id}`).toPromise();\n  }\n  createSample() : TEntity {\n    return null;\n  }\n}\n\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "createSample",
                    "args": [],
                    "optional": false,
                    "returnType": "TEntity",
                    "typeParameters": [],
                    "line": 9
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TEntity>",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TEntity[]>",
                    "typeParameters": [],
                    "line": 5
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "entity",
                            "type": "TEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "TEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IScreenData",
            "id": "interface-IScreenData-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "interface",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "WeatherForecast",
            "id": "interface-WeatherForecast-26eb291a577bb29ff6ffee8ca77da3b2",
            "file": "src/app/fetch-data/fetch-data.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public forecasts: WeatherForecast[];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<WeatherForecast[]>(baseUrl + 'weatherforecast').subscribe(result => {\r\n      this.forecasts = result;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\ninterface WeatherForecast {\r\n  date: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "summary",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "temperatureC",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "temperatureF",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BuildServerService",
            "id": "injectable-BuildServerService-d7a6802ef3bc3a6b7b711b4acf62300b",
            "file": "src/app/data-services/build-server.service.ts",
            "properties": [
                {
                    "name": "baseAddress",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createSample",
                    "args": [],
                    "optional": false,
                    "returnType": "BuildServer",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "createSample",
                    "args": [],
                    "optional": false,
                    "returnType": "TEntity",
                    "typeParameters": [],
                    "line": 30,
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TEntity>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TEntity[]>",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "entity",
                            "type": "TEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "TEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {BuildServer} from \"../data-contracts\";\nimport {SampleBuildServer} from '../samples/sample-build-server';\nimport {BaseCrudService} from \"./base-crud.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BuildServerService extends BaseCrudService<BuildServer> {\n\n  constructor(protected http: HttpClient) {\n    super(http, 'BuildServers');\n  }\n\n  createSample(): BuildServer {\n    return <BuildServer>{\n      config: SampleBuildServer,\n      description: \"desc\"\n    };\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseCrudService",
            "type": "injectable"
        },
        {
            "name": "ProfileInfoService",
            "id": "injectable-ProfileInfoService-734df5995105a6bd404590396446bbc0",
            "file": "src/app/data-services/profile-info.service.ts",
            "properties": [
                {
                    "name": "_connectionOpen",
                    "type": "Promise<void>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_profileSubjects",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "buildInfoSubjects",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hubConnection",
                    "type": "signalR.HubConnection",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_getOrCreateBuildInfoSubject",
                    "args": [
                        {
                            "name": "buildInfoId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Subject<TBuildInfo>",
                    "typeParameters": [
                        "TBuildInfo"
                    ],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "buildInfoId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_getOrCreateProfileSubject",
                    "args": [
                        {
                            "name": "profileName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Subject<ProfileInfo>",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "profileName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_openProfile",
                    "args": [
                        {
                            "name": "configProfileId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProfileInfo",
                    "typeParameters": [],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "configProfileId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBuildInfo",
                    "args": [
                        {
                            "name": "buildInfoId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TBuildInfo>",
                    "typeParameters": [
                        "TBuildInfo"
                    ],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "buildInfoId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeForProfile",
                    "args": [
                        {
                            "name": "profileName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProfileInfo>",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "profileName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsubscribeFromBuildInfo",
                    "args": [
                        {
                            "name": "buildInfoId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "buildInfoId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsubscribeFromProfile",
                    "args": [
                        {
                            "name": "profileName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "profileName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  BuildInfo,\n  BuildScreenData,\n  ProfileInfo,\n  Screen,\n  ScreenType,\n} from '../data-contracts';\nimport { SampleBuilds } from '../samples/sample-builds';\nimport { SignalRService } from '../shared/signalR/signalR-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileInfoService {\n  private hubConnection: signalR.HubConnection;\n  private _profileSubjects: object = {};\n  private _connectionOpen: Promise<void>;\n  private buildInfoSubjects: object = {};\n\n  constructor(private zone: NgZone, private signalRService: SignalRService) {\n    (<any>window).BuildInfoService = this;\n    this.hubConnection = this.signalRService.buildHubConnection('profile');\n    this.hubConnection.on('profileDataReady', (profileName, profileData) => {\n      const subject = this._getOrCreateProfileSubject(profileName);\n      const screens = profileData || this._openProfile(profileName);\n      this.zone.run(() => subject.next(screens));\n    });\n    this.hubConnection.on('buildInfoReady', (buildInfo) => {\n      const info = buildInfo.config;\n      console.debug(`buildInfoReady ${info.id}`);\n      const subject = this._getOrCreateBuildInfoSubject<BuildInfo>(info.id);\n      info.startedOn = new Date(info.startedOn);\n      info.completedOn = new Date(info.completedOn);\n      this.zone.run(() => subject.next(info));\n    });\n    this._connectionOpen = this.hubConnection.start();\n  }\n\n  _getOrCreateProfileSubject(profileName: string): Subject<ProfileInfo> {\n    if (!this._profileSubjects.hasOwnProperty(profileName)) {\n      this._profileSubjects[profileName] = new Subject<ProfileInfo>();\n    }\n    return this._profileSubjects[profileName];\n  }\n\n  _getOrCreateBuildInfoSubject<TBuildInfo extends BuildInfo>(\n    buildInfoId: string\n  ): Subject<TBuildInfo> {\n    if (!this.buildInfoSubjects[buildInfoId]) {\n      this.buildInfoSubjects[buildInfoId] = new Subject<TBuildInfo>();\n    }\n    return this.buildInfoSubjects[buildInfoId];\n  }\n\n  getBuildInfo<TBuildInfo extends BuildInfo>(\n    buildInfoId: string\n  ): Observable<TBuildInfo> {\n    this._connectionOpen.then((value) => {\n      this.hubConnection\n        .send('subscribeForBuildInfo', buildInfoId)\n        .then(() => console.debug(`subscribed for build info ${buildInfoId}`));\n    });\n    const subject = this._getOrCreateBuildInfoSubject<TBuildInfo>(buildInfoId);\n    return subject.asObservable();\n  }\n\n  unsubscribeFromBuildInfo(buildInfoId: string): Promise<void> {\n    console.debug(`unsubscribeFromBuildInfo ${buildInfoId}`);\n    return this.hubConnection.send('unsubscribeFromBuildInfo', buildInfoId);\n  }\n\n  subscribeForProfile(profileName: string): Observable<ProfileInfo> {\n    console.warn(`subscribeForProfile ${profileName}`);\n    this._connectionOpen.then((value) => {\n      this.hubConnection\n        .send('subscribe', profileName)\n        .then(() => console.debug(`subscribed for profile ${profileName}`));\n    });\n    return this._getOrCreateProfileSubject(profileName).asObservable();\n  }\n\n  unsubscribeFromProfile(profileName: string): Promise<void> {\n    console.debug(`unsubscribeFromProfile ${profileName}`);\n    return this.hubConnection.send('unsubscribe', profileName);\n  }\n\n  _openProfile(configProfileId): ProfileInfo {\n    if (configProfileId === 'empty') {\n      return new ProfileInfo();\n    }\n    return <ProfileInfo>{\n      screens: [\n        <Screen>{\n          id: 'id1',\n          type: ScreenType.BuildInfo,\n          data: <BuildScreenData>{\n            builds: <any>SampleBuilds,\n          },\n        },\n      ],\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "zone",
                        "type": "NgZone"
                    },
                    {
                        "name": "signalRService",
                        "type": "SignalRService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signalRService",
                        "type": "SignalRService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileService",
            "id": "injectable-ProfileService-9f046ecfffeea94fd8376d6610953782",
            "file": "src/app/data-services/profile.service.ts",
            "properties": [
                {
                    "name": "baseAddress",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createSample",
                    "args": [],
                    "optional": false,
                    "returnType": "Profile",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "createSample",
                    "args": [],
                    "optional": false,
                    "returnType": "TEntity",
                    "typeParameters": [],
                    "line": 30,
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TEntity>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TEntity[]>",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "entity",
                            "type": "TEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "TEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseCrudService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {BaseCrudService} from './base-crud.service';\nimport {Profile} from '../data-contracts';\nimport {HttpClient} from '@angular/common/http';\nimport {SampleProfile} from '../samples/sample-profile';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfileService extends BaseCrudService<Profile> {\n\n  constructor(protected http: HttpClient) {\n    super(http, 'Profiles');\n  }\n\n  createSample(): Profile {\n    return <Profile>{\n      name: 'sample',\n      description: 'desc',\n      config: SampleProfile\n    };\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseCrudService",
            "type": "injectable"
        },
        {
            "name": "SchemaService",
            "id": "injectable-SchemaService-528b2669ec02f7be7b2f2399d1752ba0",
            "file": "src/app/schema.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getBuildServerSchema",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "getProfileSchema",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\n\nimport * as profileSchema from './.schema/profile.schema.json'\nimport * as buildServerSchema from './.schema/build-server.schema.json'\nimport {UIUtils} from \"./uiutils\";\nimport {BuildServerService} from \"./data-services/build-server.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SchemaService {\n\n  constructor(private dataService: BuildServerService, private _uiUtils: UIUtils) { }\n\n  async getProfileSchema() : Promise<any> {\n    const config = (<any>profileSchema).default;\n    const buildServers = await this.dataService.getAll().toPromise();\n    const buildServerNames = buildServers.map(s => this._uiUtils.getBuildServerName(s));\n    config.schema.definitions.buildList.properties.buildServer.default = buildServerNames[0];\n    config.schema.definitions.buildList.properties.buildServer.enum = buildServerNames;\n    return config;\n  }\n  getBuildServerSchema(){\n    return (<any>buildServerSchema).default;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "BuildServerService"
                    },
                    {
                        "name": "_uiUtils",
                        "type": "UIUtils"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "BuildServerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_uiUtils",
                        "type": "UIUtils",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SignalRService",
            "id": "injectable-SignalRService-3b2f06e5715bdc1f87d419c9e094039e",
            "file": "src/app/shared/signalR/signalR-service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "buildHubConnection",
                    "args": [
                        {
                            "name": "hub",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "signalR.HubConnection",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "hub",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import * as signalR from '@microsoft/signalr';\r\nimport {environment} from '../../../environments/environment';\r\nimport {Injectable} from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SignalRService {\r\n  buildHubConnection(hub: string): signalR.HubConnection {\r\n    return new signalR.HubConnectionBuilder()\r\n      .withUrl(`${environment.signalRBaseUrl}/${hub}`)\r\n      .withAutomaticReconnect()\r\n      .build();\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "UIBuildServerService",
            "id": "injectable-UIBuildServerService-b0804fe637eaef71fe1f1811f26aa8c4",
            "file": "src/app/data-services/uibuild-server.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "_showErr",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "_showMsg",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "createSample",
                    "args": [],
                    "optional": false,
                    "returnType": "TEntity",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TEntity>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TEntity[]>",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "getEntityName",
                    "args": [
                        {
                            "name": "entity",
                            "type": "TEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "TEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "entity",
                            "type": "TEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "TEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {BuildServerService} from \"./build-server.service\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {UICrudService} from \"./ui-crud-service\";\nimport {BuildServer} from \"../data-contracts\";\n\n@Injectable({\n  providedIn: 'root',\n  deps: [BuildServerService, MatSnackBar],\n  useFactory: (service: BuildServerService, snackBar: MatSnackBar) => {\n    return new UIBuildServerService(service, \"build server\", snackBar, (entity) => {\n      return (<any>entity)?.config?.name;\n    });\n  },\n})\nexport class UIBuildServerService extends UICrudService<BuildServer> {\n}\n",
            "extends": "UICrudService",
            "type": "injectable"
        },
        {
            "name": "UIProfileService",
            "id": "injectable-UIProfileService-1e5a077bc674764457442d8132064ebf",
            "file": "src/app/data-services/uiprofile.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "_showErr",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "_showMsg",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "createSample",
                    "args": [],
                    "optional": false,
                    "returnType": "TEntity",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TEntity>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TEntity[]>",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "getEntityName",
                    "args": [
                        {
                            "name": "entity",
                            "type": "TEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "TEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "entity",
                            "type": "TEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "TEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UICrudService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {ProfileService} from \"./profile.service\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {UICrudService} from \"./ui-crud-service\";\nimport {Profile} from \"../data-contracts\";\n\n@Injectable({\n  providedIn: 'root',\n  deps: [ProfileService, MatSnackBar],\n  useFactory: (service: ProfileService, snackBar: MatSnackBar) => {\n    return new UIProfileService(service, \"profile\", snackBar);\n  }\n})\nexport class UIProfileService extends UICrudService<Profile>{\n}\n",
            "extends": "UICrudService",
            "type": "injectable"
        },
        {
            "name": "UIUtils",
            "id": "injectable-UIUtils-ce14c1901e084ed4bb0bce8d3b446e58",
            "file": "src/app/uiutils.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getBuildServerName",
                    "args": [
                        {
                            "name": "buildServer",
                            "type": "BuildServer"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "buildServer",
                            "type": "BuildServer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfigText",
                    "args": [
                        {
                            "name": "configItem",
                            "type": "BaseConfigItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "configItem",
                            "type": "BaseConfigItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setConfig",
                    "args": [
                        {
                            "name": "configItem",
                            "type": "BaseConfigItem"
                        },
                        {
                            "name": "text",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "configItem",
                            "type": "BaseConfigItem",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BaseConfigItem, BuildServer } from './data-contracts';\n\n@Injectable()\nexport class UIUtils {\n  getConfigText(configItem: BaseConfigItem) {\n    return JSON.stringify(configItem.config, null, 4);\n  }\n  setConfig(configItem: BaseConfigItem, text: string) {\n    configItem.config = JSON.parse(text);\n  }\n\n  getBuildServerName(buildServer: BuildServer) {\n    return buildServer.config.name;\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a2d1e577d157b3cb58ead820233d3568",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo() {\r\n    return browser.get('/');\r\n  }\r\n\r\n  getMainHeading() {\r\n    return element(by.css('app-root h1')).getText();\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getMainHeading",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseConfigItem",
            "id": "class-BaseConfigItem-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "config",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 61
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseCrudService",
            "id": "class-BaseCrudService-b8b26c55ec2f346ea379e799ba651aeb",
            "file": "src/app/data-services/base-crud.service.ts",
            "type": "class",
            "sourceCode": "import {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\n\nexport interface ICrudService<TEntity> {\n  getAll() : Observable<TEntity[]>;\n  get(id: string) : Observable<TEntity>;\n  save(entity: TEntity) : Promise<object>;\n  remove(id: string) : Promise<object>;\n  createSample() : TEntity;\n}\nexport class BaseCrudService<TEntity> implements ICrudService<TEntity> {\n\n  protected baseAddress: string;\n  constructor(protected http: HttpClient, protected endpoint: string) {\n    this.baseAddress = `/api/${this.endpoint}`;\n  }\n\n  getAll() : Observable<TEntity[]> {\n    return this.http.get<TEntity[]>(`${this.baseAddress}/GetAll`);\n  }\n  get(id: string) : Observable<TEntity> {\n    return this.http.get<TEntity>(`${this.baseAddress}/Get?id=${id}`);\n  }\n  save(entity: TEntity) : Promise<object> {\n    return this.http.put(this.baseAddress, entity).toPromise();\n  }\n  remove(id: string) : Promise<object> {\n    return  this.http.delete(`${this.baseAddress}?id=${id}`).toPromise();\n  }\n  createSample() : TEntity {\n    return null;\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "endpoint",
                        "type": "string"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "endpoint",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "baseAddress",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createSample",
                    "args": [],
                    "optional": false,
                    "returnType": "TEntity",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TEntity>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TEntity[]>",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "entity",
                            "type": "TEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "TEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICrudService"
            ]
        },
        {
            "name": "BuildData",
            "id": "class-BuildData-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "config",
                    "type": "BuildInfo",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "viewType",
                    "type": "BuildViewType",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BuildInfo",
            "id": "class-BuildInfo-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "completedOn",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "number",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "startedBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "startedOn",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "status",
                    "type": "BuildStatus",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BuildScreenData",
            "id": "class-BuildScreenData-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "builds",
                    "type": "BuildData[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IScreenData"
            ]
        },
        {
            "name": "BuildServer",
            "id": "class-BuildServer-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "config",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "BaseConfigItem"
                    }
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "BaseConfigItem"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "BaseConfigItem"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "BaseConfigItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseConfigItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Change",
            "id": "class-Change-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "author",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Profile",
            "id": "class-Profile-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "public",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "config",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "BaseConfigItem"
                    }
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "BaseConfigItem"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "BaseConfigItem"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "BaseConfigItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseConfigItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileInfo",
            "id": "class-ProfileInfo-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "screens",
                    "type": "Screen[]",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Screen",
            "id": "class-Screen-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "type": "IScreenData",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "type": "ScreenType",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TcBuildInfo",
            "id": "class-TcBuildInfo-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "changes",
                    "type": "Change[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "projectName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "statusText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "completedOn",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BuildInfo"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BuildInfo"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BuildInfo"
                    }
                },
                {
                    "name": "number",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BuildInfo"
                    }
                },
                {
                    "name": "startedBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BuildInfo"
                    }
                },
                {
                    "name": "startedOn",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BuildInfo"
                    }
                },
                {
                    "name": "status",
                    "type": "BuildStatus",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BuildInfo"
                    }
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BuildInfo"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BuildInfo",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UICrudService",
            "id": "class-UICrudService-9b7d766d3d03349fccdb850164cfc167",
            "file": "src/app/data-services/ui-crud-service.ts",
            "type": "class",
            "sourceCode": "import {ICrudService} from \"./base-crud.service\";\nimport {MatSnackBar, MatSnackBarConfig} from \"@angular/material/snack-bar\";\nimport {Observable, throwError} from \"rxjs\";\nimport {catchError} from \"rxjs/operators\";\n\nexport class UICrudService<TEntity> implements ICrudService<TEntity>  {\n  constructor(private _service: ICrudService<TEntity>, private entityDesc: string, private _snackBar: MatSnackBar, private _nameFormatter?: Function ) {\n    this._nameFormatter = _nameFormatter ?? this.getEntityName;\n  }\n  private _showErr(msg: string){\n    this._showMsg(msg, 15000);\n  }\n  private _showMsg(msg: string, duration?: number){\n    this._snackBar.open(msg, null, <MatSnackBarConfig<any>>{\n      duration: duration ?? 2000\n    });\n  }\n\n  get(id: string): Observable<TEntity> {\n    return this._service.get(id).pipe(\n      catchError(err => {\n        this._showErr(`Error while requesting ${this.entityDesc} with id ${id}: ${err.statusText}.`);\n        return throwError(err);\n      }));\n  }\n\n  getAll(): Observable<TEntity[]> {\n    return this._service.getAll().pipe(\n      catchError(err => {\n        this._showErr(`Error while requesting ${this.entityDesc}: ${err.statusText}.`);\n        return throwError(err);\n      }));\n  }\n\n  async remove(id: string): Promise<object> {\n    const result = await this._service.remove(id);\n    this._showMsg(`Removed ${this.entityDesc} ${id}.`);\n    return result;\n  }\n\n  protected getEntityName(entity: TEntity){\n    return (<any>entity).name;\n  }\n  async save(entity: TEntity): Promise<object> {\n    const result = await this._service.save(entity);\n    this._showMsg(`Saved ${this.entityDesc} ${this._nameFormatter(entity)}.`);\n    return result;\n  }\n\n  createSample(): TEntity {\n    return this._service.createSample();\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_service",
                        "type": "ICrudService<TEntity>"
                    },
                    {
                        "name": "entityDesc",
                        "type": "string"
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "_nameFormatter",
                        "type": "Function",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "_service",
                        "type": "ICrudService<TEntity>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "entityDesc",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_nameFormatter",
                        "type": "Function",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "_showErr",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_showMsg",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSample",
                    "args": [],
                    "optional": false,
                    "returnType": "TEntity",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TEntity>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TEntity[]>",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "getEntityName",
                    "args": [
                        {
                            "name": "entity",
                            "type": "TEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "TEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "entity",
                            "type": "TEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<object>",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "TEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICrudService"
            ]
        },
        {
            "name": "User",
            "id": "class-User-5f12e5d4d1ba563ec4604a64b9db1664",
            "file": "src/app/data-contracts.ts",
            "type": "class",
            "sourceCode": "export class BuildData {\r\n  public viewType: BuildViewType;\r\n  public config: BuildInfo;\r\n}\r\nexport enum BuildStatus {\r\n  Undefined,\r\n  Running,\r\n  Success,\r\n  Failed\r\n}\r\nexport class BuildInfo {\r\n  // profile name + screen number + build number\r\n  public id: string;\r\n  public name: string;\r\n  public number: string;\r\n  public status: BuildStatus;\r\n  public url: string;\r\n  public startedBy: string;\r\n  public startedOn: Date;\r\n  public completedOn: Date;\r\n}\r\n\r\nexport class TcBuildInfo extends BuildInfo {\r\n  public changes: Change[];\r\n  public projectName: string;\r\n  public statusText: string;\r\n}\r\nexport interface IScreenData {}\r\n\r\nexport class BuildScreenData implements IScreenData {\r\n  public builds: BuildData[];\r\n}\r\nexport class User {\r\n  public name: string;\r\n  public avatarImage: string;\r\n  getAvatarImage() {\r\n    return 'https://secure.gravatar.com/avatar/e0d74fa45947023e43e5846320951c59?d=mm&s=48';\r\n  }\r\n}\r\nexport class Change {\r\n  public message: string;\r\n  public author: User;\r\n}\r\n\r\nexport enum ScreenType {\r\n  BuildInfo\r\n}\r\nexport class ProfileInfo {\r\n  public screens: Screen[];\r\n  public description: string;\r\n}\r\nexport class Screen {\r\n  // profile name + screen number\r\n  public id: string;\r\n  public type: ScreenType;\r\n  public data: IScreenData;\r\n}\r\n\r\nexport class BaseConfigItem {\r\n  id?: string;\r\n  name?: string;\r\n  description: string;\r\n  config: any;\r\n}\r\n\r\nexport class Profile extends BaseConfigItem {\r\n  public: boolean;\r\n}\r\n\r\nexport class BuildServer extends BaseConfigItem {\r\n}\r\nexport enum BuildServerType {\r\n  TeamCity = 'teamCity',\r\n  Jenkins = 'jenkins'\r\n}\r\nexport enum BuildViewType {\r\n  Unknown,\r\n  TeamCity,\r\n  Jenkins\r\n}\r\n",
            "properties": [
                {
                    "name": "avatarImage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAvatarImage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-78fff66d47ff1107cccb217b71dc7f69",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'app'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<body>\r\n  <app-nav-menu></app-nav-menu>\r\n  <div>\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</body>\r\n"
        },
        {
            "name": "BaseBuildInfoComponent",
            "id": "component-BaseBuildInfoComponent-da345132fd0f853663525af160c5c8a6",
            "file": "src/app/base-build-info/base-build-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base-build-info",
            "styleUrls": [
                "./base-build-info.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./base-build-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buildInfo",
                    "line": 14,
                    "type": "TBuildInfo"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_subscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "buildStatus",
                    "defaultValue": "BuildStatus",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getStatusClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "openBuildPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, OnDestroy} from '@angular/core';\n\nimport {BuildInfo, BuildStatus} from \"../data-contracts\";\nimport {ProfileInfoService} from \"../data-services/profile-info.service\";\nimport {Subscription} from \"rxjs\";\n\n@Component({\n  selector: 'app-base-build-info',\n  templateUrl: './base-build-info.component.html',\n  styleUrls: ['./base-build-info.component.css']\n})\nexport class BaseBuildInfoComponent<TBuildInfo extends BuildInfo> implements OnInit,OnDestroy {\n\n  @Input() buildInfo: TBuildInfo;\n  public buildStatus = BuildStatus;\n  private _subscription: Subscription;\n  constructor(protected profileInfoService: ProfileInfoService) {\n  }\n\n  ngOnInit(): void {\n    this._subscription = this.profileInfoService.getBuildInfo<TBuildInfo>(this.buildInfo.id)\n      .subscribe(value => {\n        return this.buildInfo = value;\n      });\n  }\n\n  getStatusClass(): string {\n    return \"build-status-\" + this.buildStatus[this.buildInfo.status].toLowerCase()\n  }\n  openBuildPage(){\n    window.open(this.buildInfo.url);\n  };\n\n  async ngOnDestroy(): Promise<void> {\n    await this.profileInfoService.unsubscribeFromBuildInfo(this.buildInfo.id);\n    this._subscription.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./base-build-info.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "profileInfoService",
                        "type": "ProfileInfoService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "profileInfoService",
                        "type": "ProfileInfoService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card  [ngClass]=\"getStatusClass()\" class=\"mat-elevation-z4\">\n  <mat-card-header>\n    <button class=\"status-icon\" mat-mini-fab mat-card-avatar mat-button [ngSwitch]=\"buildInfo.status\">\n      <mat-icon *ngSwitchCase=\"buildStatus.Failed\">clear</mat-icon>\n      <mat-icon *ngSwitchCase=\"buildStatus.Success\">check</mat-icon>\n    </button>\n    <mat-card-title>{{buildInfo.name}}</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    {{buildInfo.startedBy}}\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "BuildDateInfoComponent",
            "id": "component-BuildDateInfoComponent-ac2c0b2f6c1077b2899cccd222439ac0",
            "file": "src/app/build-date-info/build-date-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-build-date-info",
            "styleUrls": [
                "./build-date-info.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./build-date-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "endDate",
                    "line": 11,
                    "type": "Date"
                },
                {
                    "name": "startDate",
                    "line": 10,
                    "type": "Date"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dateFormat",
                    "defaultValue": "'dd.MM HH:mm'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-build-date-info',\n  templateUrl: './build-date-info.component.html',\n  styleUrls: ['./build-date-info.component.css']\n})\nexport class BuildDateInfoComponent implements OnInit {\n\n  @Input() startDate: Date;\n  @Input() endDate: Date;\n  dateFormat = 'dd.MM HH:mm';\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./build-date-info.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span>Started: {{startDate|date:dateFormat}}</span><span> / </span>\n<span>Completed: {{endDate|date:dateFormat}}</span>\n"
        },
        {
            "name": "BuildScreenComponent",
            "id": "component-BuildScreenComponent-f0fb2ac03e821a07d19187ec80ad6dcf",
            "file": "src/app/build-screen/build-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-build-monitor",
            "styleUrls": [
                "./build-screen.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./build-screen.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "screen",
                    "line": 15,
                    "type": "Screen"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buildScreenData",
                    "type": "BuildScreenData",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "buildViewType",
                    "defaultValue": "BuildViewType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input\n} from '@angular/core';\nimport {BuildScreenData, BuildViewType, Screen} from \"../data-contracts\";\n\n@Component({\n  selector: 'app-build-monitor',\n  templateUrl: './build-screen.component.html',\n  styleUrls: ['./build-screen.component.css']\n})\nexport class BuildScreenComponent implements OnInit {\n  public buildViewType = BuildViewType;\n  @Input() screen: Screen;\n  buildScreenData: BuildScreenData;\n  constructor() { }\n\n  ngOnInit(): void {\n    this.buildScreenData = this.screen.data as BuildScreenData;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".build-info-item{\r\n\r\n}\r\n.build-screen {\r\n  padding: 1em;\r\n}\r\n",
                    "styleUrl": "./build-screen.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"build-screen\" gdGap=\"2em\" gdColumns=\"repeat(auto-fill, minmax(22em, 1fr))\">\n  <div class=\"build-info-item\" *ngFor=\"let build of buildScreenData.builds\">\n    <div [ngSwitch]=\"build.viewType\">\n      <app-tc-build-info [buildInfo]=\"build.config\" *ngSwitchCase=\"buildViewType.TeamCity\"></app-tc-build-info>\n      <div *ngSwitchDefault>Build {{build.config.name}} has not supported view type {{build.viewType}}</div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "BuildServerEditComponent",
            "id": "component-BuildServerEditComponent-681ba6f70d1b5f617619d72a30d053ba",
            "file": "src/app/build-server-edit/build-server-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-build-server-edit",
            "styleUrls": [
                "./build-server-edit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./build-server-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buildServer",
                    "type": "BuildServer",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "config",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "editorInitialized",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "editorOptions",
                    "defaultValue": "{theme: 'vs-dark', language: 'json'}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isNewMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "back",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onInit",
                    "args": [
                        {
                            "name": "editor",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, NgZone } from '@angular/core';\nimport {BuildServer} from \"../data-contracts\";\nimport {SchemaService} from \"../schema.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Location} from \"@angular/common\";\nimport {UIUtils} from \"../uiutils\";\nimport {UIBuildServerService} from \"../data-services/uibuild-server.service\";\n\n@Component({\n  selector: 'app-build-server-edit',\n  templateUrl: './build-server-edit.component.html',\n  styleUrls: ['./build-server-edit.component.css']\n})\nexport class BuildServerEditComponent implements OnInit {\n  isNewMode: boolean;\n  editorOptions = {theme: 'vs-dark', language: 'json'};\n  buildServer: BuildServer;\n  config: string;\n  editorInitialized: boolean = false;\n  constructor(private _schemaService: SchemaService, private _route: ActivatedRoute,\n              private _location: Location, private _buildServerService: UIBuildServerService,\n              private _uiUtils: UIUtils, private _zone: NgZone) { }\n\n  async ngOnInit(): Promise<void> {\n    this.isNewMode = this._route.snapshot.paramMap.get('mode') === \"new\";\n    if (this.isNewMode){\n      this.buildServer = this._buildServerService.createSample();\n    } else {\n      let id = this._route.snapshot.paramMap.get('id');\n      this.buildServer = await this._buildServerService.get(id).toPromise();\n    }\n    this.config = this._uiUtils.getConfigText(this.buildServer);\n  }\n\n  onInit(editor) {\n    const buildServerSchema = this._schemaService.getBuildServerSchema();\n    (<any>window).monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n      validate: true,\n      schemas: [buildServerSchema]\n    });\n    this._zone.run(() => this.editorInitialized = true);\n  }\n\n  async save() {\n    this._uiUtils.setConfig(this.buildServer, this.config);\n    await this._buildServerService.save(this.buildServer);\n    this.back();\n  }\n\n  back() {\n    this._location.back();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\r\n  padding: 2em;\r\n}\r\n.full-width {\r\n  width: 100%;\r\n}\r\n.buttons button {\r\n  margin-right: 1em;\r\n}\r\n.code-editor {\r\n  height: 100%\r\n}\r\n.code-editor-wrap {\r\n  height: calc(70vh - 100px);\r\n}\r\n",
                    "styleUrl": "./build-server-edit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_schemaService",
                        "type": "SchemaService"
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_location",
                        "type": "Location"
                    },
                    {
                        "name": "_buildServerService",
                        "type": "UIBuildServerService"
                    },
                    {
                        "name": "_uiUtils",
                        "type": "UIUtils"
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_schemaService",
                        "type": "SchemaService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_buildServerService",
                        "type": "UIBuildServerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_uiUtils",
                        "type": "UIUtils",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"card\">\n  <mat-card-header>\n    <ng-container [ngSwitch]=\"isNewMode\">\n      <mat-card-title *ngSwitchCase=\"true\">Create build server connection</mat-card-title>\n      <mat-card-title *ngSwitchDefault>Edit build server connection</mat-card-title>\n    </ng-container>\n  </mat-card-header>\n  <mat-card-content>\n    <div *ngIf=\"buildServer\">\n      <div class=\"form\">\n        <mat-form-field class=\"full-width\">\n          <mat-label>Description</mat-label>\n          <input matInput id=\"description\" placeholder=\"e.g. for core developers \" [(ngModel)]=\"buildServer.description\">\n        </mat-form-field>\n      </div>\n      <div class=\"code-editor-wrap\">\n        <div *ngIf=\"!editorInitialized\">\n          <mat-spinner></mat-spinner>\n        </div>\n        <ngx-monaco-editor class=\"code-editor\" [options]=\"editorOptions\" (onInit)=\"onInit($event)\" [(ngModel)]=\"config\"></ngx-monaco-editor>\n      </div>\n    </div>\n  </mat-card-content>\n  <mat-card-actions align=\"end\" class=\"buttons\">\n    <button mat-fab color=\"primary\" aria-label=\"Save\" (click)=\"save()\">\n      <mat-icon>save</mat-icon>\n    </button>\n    <button mat-fab color=\"primary\" aria-label=\"Exit\" (click)=\"back()\">\n      <mat-icon>undo</mat-icon>\n    </button>\n  </mat-card-actions>\n</mat-card>\n\n"
        },
        {
            "name": "BuildServerListComponent",
            "id": "component-BuildServerListComponent-330f733eb4c6d3335c4551600a54fd5a",
            "file": "src/app/build-server-list/build-server-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-build-server-list",
            "styleUrls": [
                "./build-server-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./build-server-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buildServers$",
                    "line": 15,
                    "type": "Observable<BuildServer[]>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['name', 'type', 'description', 'actions']",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "addBuildServer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "server",
                            "type": "BuildServer"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "server",
                            "type": "BuildServer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTypeDisplayValue",
                    "args": [
                        {
                            "name": "server",
                            "type": "BuildServer"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "server",
                            "type": "BuildServer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {BuildServer} from \"../data-contracts\";\nimport {Router} from \"@angular/router\";\nimport {UIUtils} from \"../uiutils\";\nimport {Observable} from \"rxjs\";\nimport {UIBuildServerService} from \"../data-services/uibuild-server.service\";\n\n@Component({\n  selector: 'app-build-server-list',\n  templateUrl: './build-server-list.component.html',\n  styleUrls: ['./build-server-list.component.css']\n})\nexport class BuildServerListComponent implements OnInit {\n\n  @Input() buildServers$: Observable<BuildServer[]>;\n  displayedColumns: string[] = ['name', 'type', 'description', 'actions'];\n  constructor(private router: Router, private _buildServerService: UIBuildServerService, private _uiUtils: UIUtils) { }\n\n  ngOnInit(): void {\n    this.buildServers$ = this._buildServerService.getAll();\n  }\n\n  addBuildServer() {\n    this.router.navigate(['/build-server', {mode: \"new\"}]);\n  }\n\n  edit(id: any) {\n    this.router.navigate(['/build-server', {mode: \"edit\", id: id}]);\n  }\n\n  getTypeDisplayValue(server: BuildServer) {\n    return server.config.type;\n  }\n  getName(server: BuildServer){\n    return this._uiUtils.getBuildServerName(server);\n  }\n\n  async remove(id: any) {\n    await this._buildServerService.remove(id);\n    this.buildServers$ = this._buildServerService.getAll();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./build-server-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "_buildServerService",
                        "type": "UIBuildServerService"
                    },
                    {
                        "name": "_uiUtils",
                        "type": "UIUtils"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_buildServerService",
                        "type": "UIBuildServerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_uiUtils",
                        "type": "UIUtils",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <mat-card-content>\n    <mat-table [dataSource]=\"buildServers$\" class=\"mat-elevation-z4\">\n\n      <ng-container matColumnDef=\"id\">\n        <mat-header-cell mat-header-cell *matHeaderCellDef> Id </mat-header-cell>\n        <mat-cell mat-cell *matCellDef=\"let element\"> {{element.id}} </mat-cell>\n      </ng-container>\n\n      <ng-container matColumnDef=\"name\">\n        <mat-header-cell mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\n        <mat-cell mat-cell *matCellDef=\"let element\"> {{getName(element)}} </mat-cell>\n      </ng-container>\n\n      <ng-container matColumnDef=\"type\">\n        <mat-header-cell mat-header-cell *matHeaderCellDef> Type </mat-header-cell>\n        <mat-cell mat-cell *matCellDef=\"let element\"> {{getTypeDisplayValue(element)}} </mat-cell>\n      </ng-container>\n\n      <ng-container matColumnDef=\"description\">\n        <mat-header-cell mat-header-cell *matHeaderCellDef> Description </mat-header-cell>\n        <mat-cell mat-cell *matCellDef=\"let element\"> {{element.description}} </mat-cell>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <mat-header-cell mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n        <mat-cell mat-cell *matCellDef=\"let element\">\n          <button mat-icon-button (click) = \"edit(element.id)\">\n            <mat-icon>edit</mat-icon>\n          </button>\n          <button mat-icon-button (click)=\"remove(element.id)\" >\n            <mat-icon>delete</mat-icon>\n          </button>\n        </mat-cell>\n      </ng-container>\n\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n      <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n    </mat-table>\n    <mat-card-actions align=\"end\">\n      <button mat-fab color=\"primary\" aria-label=\"Add new profile\" (click)=\"addBuildServer()\">\n        <mat-icon>add</mat-icon>\n      </button>\n    </mat-card-actions>\n\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "FetchDataComponent",
            "id": "component-FetchDataComponent-26eb291a577bb29ff6ffee8ca77da3b2",
            "file": "src/app/fetch-data/fetch-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fetch-data",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./fetch-data.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "forecasts",
                    "type": "WeatherForecast[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public forecasts: WeatherForecast[];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<WeatherForecast[]>(baseUrl + 'weatherforecast').subscribe(result => {\r\n      this.forecasts = result;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\ninterface WeatherForecast {\r\n  date: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "baseUrl",
                        "type": "string"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseUrl",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 id=\"tableLabel\">Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p *ngIf=\"!forecasts\"><em>Loading...</em></p>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"forecasts\">\r\n  <thead>\r\n    <tr>\r\n      <th>Date</th>\r\n      <th>Temp. (C)</th>\r\n      <th>Temp. (F)</th>\r\n      <th>Summary</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let forecast of forecasts\">\r\n      <td>{{ forecast.date }}</td>\r\n      <td>{{ forecast.temperatureC }}</td>\r\n      <td>{{ forecast.temperatureF }}</td>\r\n      <td>{{ forecast.summary }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-f5acee9bc115cdb35935d7e522fd23fe",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<mat-card>\r\n  <mat-card-content>\r\n    <h1>Build monitor app</h1>\r\n  </mat-card-content>\r\n</mat-card>\r\n"
        },
        {
            "name": "NavMenuComponent",
            "id": "component-NavMenuComponent-a176c2cf2bf04f792d3587a57801f12f",
            "file": "src/app/nav-menu/nav-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-menu",
            "styleUrls": [
                "./nav-menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isExpanded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "collapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nav-menu',\r\n  templateUrl: './nav-menu.component.html',\r\n  styleUrls: ['./nav-menu.component.css']\r\n})\r\nexport class NavMenuComponent {\r\n  isExpanded = false;\r\n\r\n  collapse() {\r\n    this.isExpanded = false;\r\n  }\r\n\r\n  toggle() {\r\n    this.isExpanded = !this.isExpanded;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./nav-menu.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-toolbar>\r\n  <button mat-button [routerLink]=\"['/']\" [routerLinkActive]=\"['link-active']\">Build monitor</button>\r\n  <button mat-button [routerLink]=\"['/profile-list']\" [routerLinkActive]=\"['link-active']\">Profiles</button>\r\n  <button mat-button [routerLink]=\"['/build-server-list']\" [routerLinkActive]=\"['link-active']\">Build servers</button>\r\n</mat-toolbar>\r\n"
        },
        {
            "name": "ProfileEditComponent",
            "id": "component-ProfileEditComponent-eaee938721481ec6ad831eba52615924",
            "file": "src/app/profile-edit/profile-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-edit",
            "styleUrls": [
                "./profile-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "editorInitialized",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "editorOptions",
                    "defaultValue": "{theme: 'vs-dark', language: 'json'}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isNewMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "profile",
                    "type": "Profile",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "back",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onInit",
                    "args": [
                        {
                            "name": "editor",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, inject, NgZone, OnInit} from '@angular/core';\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {Location} from '@angular/common';\r\n\r\nimport {Profile} from \"../data-contracts\";\r\nimport {SchemaService} from \"../schema.service\";\r\nimport {UIUtils} from \"../uiutils\";\r\nimport {UIProfileService} from \"../data-services/uiprofile.service\";\r\n\r\n@Component({\r\n  selector: 'app-profile-edit',\r\n  templateUrl: './profile-edit.component.html',\r\n  styleUrls: ['./profile-edit.component.scss']\r\n})\r\nexport class ProfileEditComponent implements OnInit {\r\n  isNewMode: boolean;\r\n  editorOptions = {theme: 'vs-dark', language: 'json'};\r\n  profile: Profile;\r\n  config: string;\r\n  editorInitialized: boolean = false;\r\n  constructor(private _schemaService: SchemaService, private _route: ActivatedRoute,\r\n              private _location: Location, private _profileService: UIProfileService,\r\n              private _uiUtils: UIUtils, private _zone: NgZone) {}\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.isNewMode = this._route.snapshot.paramMap.get('mode') === \"new\";\r\n    if (this.isNewMode){\r\n      this.profile = this._profileService.createSample();\r\n    } else {\r\n      let profileId = this._route.snapshot.paramMap.get('id');\r\n      this.profile = await this._profileService.get(profileId).toPromise();\r\n    }\r\n    this.config = this._uiUtils.getConfigText(this.profile);\r\n  }\r\n\r\n  async save() {\r\n    this._uiUtils.setConfig(this.profile, this.config);\r\n    await this._profileService.save(this.profile);\r\n    this._location.back();\r\n  }\r\n\r\n  back() {\r\n    this._location.back();\r\n  }\r\n\r\n  async onInit(editor) {\r\n    const profileSchema = await this._schemaService.getProfileSchema();\r\n    (<any>window).monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\r\n      validate: true,\r\n      schemas: [profileSchema]\r\n    });\r\n    this._zone.run(() => this.editorInitialized = true);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\r\n  padding: 2em;\r\n}\r\n.full-width {\r\n  width: 100%;\r\n}\r\n.buttons button {\r\n  margin-right: 1em;\r\n}\r\n.code-editor {\r\n  height: 100%\r\n}\r\n.code-editor-wrap {\r\n  height: calc(70vh - 100px);\r\n}\r\n.form-check-box{\r\nmargin-bottom: 1em;\r\n}\r\n",
                    "styleUrl": "./profile-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_schemaService",
                        "type": "SchemaService"
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_location",
                        "type": "Location"
                    },
                    {
                        "name": "_profileService",
                        "type": "UIProfileService"
                    },
                    {
                        "name": "_uiUtils",
                        "type": "UIUtils"
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_schemaService",
                        "type": "SchemaService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_profileService",
                        "type": "UIProfileService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_uiUtils",
                        "type": "UIUtils",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"card\">\n  <mat-card-header>\n    <ng-container [ngSwitch]=\"isNewMode\">\n      <mat-card-title *ngSwitchCase=\"true\">Create new profile</mat-card-title>\n      <mat-card-title *ngSwitchDefault>Edit profile</mat-card-title>\n    </ng-container>\n  </mat-card-header>\n  <mat-card-content>\n    <div *ngIf=\"profile\">\n      <div class=\"form\">\n        <mat-form-field class=\"full-width\">\n          <mat-label>Profile name</mat-label>\n          <input [required]=\"true\" matInput id=\"name\" placeholder=\"My monitor\" [(ngModel)]=\"profile.name\">\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <mat-label>Profile description</mat-label>\n          <input matInput id=\"description\" placeholder=\"e.g. for core developers \" [(ngModel)]=\"profile.description\">\n        </mat-form-field>\n        <div class=\"full-width form-check-box\">\n          <mat-checkbox id=\"isPublic\" [(ngModel)]=\"profile.public\">Public</mat-checkbox>\n        </div>\n      </div>\n      <div class=\"code-editor-wrap\">\n        <div *ngIf=\"!editorInitialized\">\n          <mat-spinner></mat-spinner>\n        </div>\n        <ngx-monaco-editor class=\"code-editor\" [options]=\"editorOptions\" (onInit)=\"onInit($event)\" [(ngModel)]=\"config\"></ngx-monaco-editor>\n      </div>\n    </div>\n  </mat-card-content>\n  <mat-card-actions align=\"end\" class=\"buttons\">\n    <button mat-fab color=\"primary\" aria-label=\"Save\" (click)=\"save()\">\n      <mat-icon>save</mat-icon>\n    </button>\n    <button mat-fab color=\"primary\" aria-label=\"Exit\" (click)=\"back()\">\n      <mat-icon>undo</mat-icon>\n    </button>\n  </mat-card-actions>\n</mat-card>\n\n"
        },
        {
            "name": "ProfileListComponent",
            "id": "component-ProfileListComponent-b1edb0c896b6481e883a58f1d21773a0",
            "file": "src/app/profile-list/profile-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-list",
            "styleUrls": [
                "./profile-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['name', 'description', 'public', 'actions']",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "profiles$",
                    "type": "Observable<Profile[]>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "addProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "view",
                    "args": [
                        {
                            "name": "name",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {Profile} from \"../data-contracts\";\nimport {Observable} from \"rxjs\";\nimport {UIProfileService} from \"../data-services/uiprofile.service\";\n\n@Component({\n  selector: 'app-profile-list',\n  templateUrl: './profile-list.component.html',\n  styleUrls: ['./profile-list.component.css']\n})\n\nexport class ProfileListComponent implements OnInit {\n  profiles$: Observable<Profile[]>;\n\n  displayedColumns: string[] = ['name', 'description', 'public', 'actions'];\n\n  constructor(private router: Router, private _profileService: UIProfileService) {\n  }\n\n  ngOnInit(): void {\n    this.profiles$ = this._profileService.getAll();\n  }\n\n  view(name: any) {\n    this.router.navigate([`/view/${name}`]);\n  }\n  addProfile(){\n    this.router.navigate(['/profile', {mode: \"new\"}]);\n  }\n\n  edit(id: any) {\n    this.router.navigate(['/profile', {mode: \"edit\", id: id}]);\n  }\n\n  async remove(id: any) {\n    await this._profileService.remove(id);\n    this.profiles$ = this._profileService.getAll();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-table {\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./profile-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "_profileService",
                        "type": "UIProfileService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_profileService",
                        "type": "UIProfileService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\r\n  <mat-card-content>\r\n    <mat-table [dataSource]=\"profiles$\" class=\"mat-elevation-z4\">\r\n\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n        <mat-cell mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"description\">\r\n        <mat-header-cell mat-header-cell *matHeaderCellDef> Description </mat-header-cell>\r\n        <mat-cell mat-cell *matCellDef=\"let element\"> {{element.description}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"public\">\r\n        <mat-header-cell mat-header-cell *matHeaderCellDef> Public </mat-header-cell>\r\n        <mat-cell mat-cell *matCellDef=\"let element\"> {{element.public}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"actions\">\r\n        <mat-header-cell mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\r\n        <mat-cell mat-cell *matCellDef=\"let element\">\r\n          <button mat-icon-button (click)=\"view(element.name)\" >\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n          <button mat-icon-button (click)=\"edit(element.id)\" >\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button (click)=\"remove(element.id)\" >\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </mat-cell>\r\n      </ng-container>\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n    <mat-card-actions align=\"end\">\r\n      <button mat-fab color=\"primary\" aria-label=\"Add new profile\" (click)=\"addProfile()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-card-actions>\r\n\r\n  </mat-card-content>\r\n</mat-card>\r\n"
        },
        {
            "name": "ScreenListComponent",
            "id": "component-ScreenListComponent-a56fbfa7aca2cc48c30e65863bed337b",
            "file": "src/app/screen-list/screen-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-monitor-list",
            "styleUrls": [
                "./screen-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./screen-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_profileName",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "monitorItems$",
                    "type": "Observable<ProfileInfo>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "monitorType",
                    "defaultValue": "ScreenType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, OnDestroy} from '@angular/core';\nimport {ProfileInfo, Screen, ScreenType} from \"../data-contracts\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {ProfileInfoService} from \"../data-services/profile-info.service\";\nimport {Observable} from \"rxjs\";\n\n@Component({\n  selector: 'app-monitor-list',\n  templateUrl: './screen-list.component.html',\n  styleUrls: ['./screen-list.component.css']\n})\nexport class ScreenListComponent implements OnInit, OnDestroy {\n  monitorItems$: Observable<ProfileInfo>;\n  public monitorType = ScreenType;\n  private _profileName;\n  constructor(private route: ActivatedRoute, private _profileInfoService: ProfileInfoService) { }\n  ngOnInit() {\n    this._profileName = this.route.snapshot.paramMap.get('profile');\n    this.monitorItems$ = this._profileInfoService.subscribeForProfile(this._profileName);\n  }\n\n  ngOnDestroy(): void {\n    this._profileInfoService.unsubscribeFromProfile(this._profileName);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./screen-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_profileInfoService",
                        "type": "ProfileInfoService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_profileInfoService",
                        "type": "ProfileInfoService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"(monitorItems$ | async)?.description let description\">\n  {{description}}\n</div>\n<div *ngIf=\"(monitorItems$ | async)?.screens; let screens\">\n  <div *ngFor=\"let item of screens \" [ngSwitch]=\"item.type\">\n    <app-build-monitor class=\"monitor\" [screen]=\"item\" *ngSwitchCase=\"monitorType.BuildInfo\"></app-build-monitor>\n    <div *ngSwitchDefault>Monitor {{item.id}} has not supported type {{item.type}}</div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "TcBuildInfoComponent",
            "id": "component-TcBuildInfoComponent-a026b5a4be74ca8ae62c012174097f06",
            "file": "src/app/tc-build-info/tc-build-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tc-build-info",
            "styleUrls": [
                "./tc-build-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tc-build-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buildInfo",
                    "line": 14,
                    "type": "TBuildInfo",
                    "inheritance": {
                        "file": "BaseBuildInfoComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_subscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseBuildInfoComponent"
                    }
                },
                {
                    "name": "buildStatus",
                    "defaultValue": "BuildStatus",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseBuildInfoComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "getStatusClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "BaseBuildInfoComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "BaseBuildInfoComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "inheritance": {
                        "file": "BaseBuildInfoComponent"
                    }
                },
                {
                    "name": "openBuildPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "inheritance": {
                        "file": "BaseBuildInfoComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {TcBuildInfo} from '../data-contracts';\nimport {BaseBuildInfoComponent} from '../base-build-info/base-build-info.component';\nimport {ProfileInfoService} from '../data-services/profile-info.service';\n\n@Component({\n  selector: 'app-tc-build-info',\n  templateUrl: './tc-build-info.component.html',\n  styleUrls: ['./tc-build-info.component.scss']\n})\nexport class TcBuildInfoComponent extends BaseBuildInfoComponent<TcBuildInfo> implements OnInit {\n\n  constructor(protected profileInfoService: ProfileInfoService) {\n    super(profileInfoService);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-card-header-text{\r\n  margin: 0;\r\n}\r\n.build-card .mat-card-content {\r\n  border-radius: 2px;\r\n  cursor: pointer;\r\n  font-size: 18pt;\r\n}\r\n.separator {\r\n  height: 2pt;\r\n  margin: 4pt 0 2pt 0;\r\n  background-color: white;\r\n}\r\n.build-id {\r\n  position: absolute;\r\n  top: 0.5em;\r\n  right: 0.5em;\r\n  font-weight: bolder;\r\n}\r\n.build-status-failed {\r\n  background: rgb(2,0,36);\r\n  background : linear-gradient(57.94deg, rgba(229, 42, 18, 1) 0%, rgba(230, 47, 40, 1) 4.94%, rgba(232, 59, 93, 1) 17.81%, rgba(232, 61, 85, 1) 23.82%, rgba(232, 67, 63, 1) 33.22%, rgba(232, 71, 49, 1) 37.85%, rgba(228, 81, 80, 1) 41.59%, rgba(225, 90, 111, 1) 46.2%, rgba(222, 97, 134, 1) 50.69%, rgba(221, 102, 147, 1) 54.95%, rgba(220, 103, 152, 1) 58.74%, rgba(223, 94, 127, 1) 60.93%, rgba(226, 85, 101, 1) 63.89%, rgba(229, 77, 81, 1) 67.16%, rgba(231, 72, 66, 1) 70.84%, rgba(232, 69, 58, 1) 75.27%, rgba(232, 68, 55, 1) 82.47%, rgba(232, 66, 54, 1) 82.67%, rgba(230, 48, 44, 1) 85.19%, rgba(229, 35, 37, 1) 88.17%, rgba(228, 27, 33, 1) 92.04%, rgba(228, 25, 32, 1) 100%);\r\n  color: white;\r\n  .build-id {\r\n    color: #932525;\r\n  }\r\n}\r\n.build-status-success {\r\n  background: rgb(2,0,36);\r\n  background : linear-gradient(61.17deg, rgba(0, 227, 139, 1) 0%, rgba(0, 212, 132, 1) 7.11%, rgba(0, 173, 114, 1) 20.76%, rgba(0, 128, 92, 1) 34.58%, rgba(20, 126, 91, 1) 51.64%, rgba(28, 125, 90, 1) 63.59%, rgba(28, 123, 89, 1) 63.93%, rgba(26, 108, 85, 1) 68.01%, rgba(24, 100, 82, 1) 72.81%, rgba(24, 97, 81, 1) 80.13%, rgba(12, 90, 76, 1) 82.38%, rgba(3, 85, 73, 1) 85.45%, rgba(0, 84, 72, 1) 90.05%);\r\n  .build-id {\r\n    color: #179785;\r\n  }\r\n}\r\n",
                    "styleUrl": "./tc-build-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "profileInfoService",
                        "type": "ProfileInfoService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "profileInfoService",
                        "type": "ProfileInfoService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseBuildInfoComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card  [ngClass]=\"getStatusClass()\" class=\"mat-elevation-z4 exo2 build-card\" (click)=\"openBuildPage()\">\n  <mat-card-content>\n    <div class=\"build-name\">{{buildInfo.name}}</div>\n    <div class=\"project-name\">{{buildInfo.projectName}}</div>\n    <div class=\"build-id\">{{buildInfo.number}}</div>\n    <div class=\"separator\"></div>\n    <app-build-date-info [startDate]=\"buildInfo.startedOn\" [endDate]=\"buildInfo.completedOn\"></app-build-date-info>\n    <div class=\"build-date-info\">{{buildInfo.startedBy}}</div>\n   <!--\n    <div class=\"build-startedBy\">{{buildInfo.statusText}}</div>\n    <div class=\"build-startedBy\">{{buildInfo.number}}</div>-->\n  </mat-card-content>\n</mat-card>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UIUtils"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BaseBuildInfoComponent"
                        },
                        {
                            "name": "BuildDateInfoComponent"
                        },
                        {
                            "name": "BuildScreenComponent"
                        },
                        {
                            "name": "BuildServerEditComponent"
                        },
                        {
                            "name": "BuildServerListComponent"
                        },
                        {
                            "name": "FetchDataComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "NavMenuComponent"
                        },
                        {
                            "name": "ProfileEditComponent"
                        },
                        {
                            "name": "ProfileListComponent"
                        },
                        {
                            "name": "ScreenListComponent"
                        },
                        {
                            "name": "TcBuildInfoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppServerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "buildServers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/build-server-list/build-server-list.stories.ts",
                "type": "BuildServer[]",
                "defaultValue": "[\r\n  <BuildServer>{description: \"Core\", config: {name: \"1\", type: BuildServerType.TeamCity}},\r\n  <BuildServer>{description: \"Core 1\", config: {name: \"2\", type: BuildServerType.TeamCity}},\r\n  <BuildServer>{description: \"some\", config: {name: \"3\", type: BuildServerType.TeamCity}},\r\n  <BuildServer>{description: \"asdsad\", config: {name: \"4\", type: BuildServerType.TeamCity}}\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  signalRBaseUrl: '/signalR'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  signalRBaseUrl: '/signalR'\r\n}"
            },
            {
                "name": "profiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile-list/profile-list.stories.ts",
                "type": "Profile[]",
                "defaultValue": "[\r\n  <Profile>{name: 'Hydrogen', description: \"Core\", public: true, config: {}},\r\n  <Profile>{name: 'Helium', description: \"Core 1\", config: {}}\r\n]"
            },
            {
                "name": "providers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.ts",
                "type": "[]",
                "defaultValue": "[\r\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\r\n]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "router",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/build-server-edit/build-server-edit.stories.ts",
                "type": "",
                "defaultValue": "RouterTestingModule.withRoutes(\r\n  [{path: '**', component: BuildServerEditComponent}]\r\n)"
            },
            {
                "name": "router",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/build-server-list/build-server-list.stories.ts",
                "type": "",
                "defaultValue": "RouterTestingModule.withRoutes(\r\n  [{path: '**', component: BuildServerListComponent}],\r\n)"
            },
            {
                "name": "router",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile-list/profile-list.stories.ts",
                "type": "",
                "defaultValue": "RouterTestingModule.withRoutes(\r\n  [{path: '**', component: ProfileListComponent}]\r\n)"
            },
            {
                "name": "router",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile-edit/profile-edit.stories.ts",
                "type": "",
                "defaultValue": "RouterTestingModule.withRoutes(\r\n  [{path: '**', component: ProfileEditComponent}]\r\n)"
            },
            {
                "name": "SampleBuilds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/samples/sample-builds.ts",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'CsConfigurationUnitTestsDbUpdate|0.0.0.0',\r\n      'name': 'Unit (Diagnostic SE_M_SE)|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / C# / Configuration',\r\n      'number': '0.0.0.0',\r\n      'status': 2,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3245893&buildTypeId=CsConfigurationUnitTestsDbUpdate',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'CoreJsIntegrationTests|4594',\r\n      'name': 'Integration|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / JS / Core',\r\n      'number': '4594',\r\n      'status': 3,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3245904&buildTypeId=CoreJsIntegrationTests',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'JsCoreUnitTestsKarma|831',\r\n      'name': 'JS Core Unit/UI Tests Karma|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / JS / Core',\r\n      'number': '831',\r\n      'status': 2,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3245903&buildTypeId=JsCoreUnitTestsKarma',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'ConfigurationUnitTest780|7509',\r\n      'name': 'Configuration|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / JS / Configuration',\r\n      'number': '7509',\r\n      'status': 3,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3245846&buildTypeId=ConfigurationUnitTest780',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'ApiTests|4189',\r\n      'name': 'API Tests|trunk',\r\n      'projectName': 'Continuous Integration / API Tests',\r\n      'number': '4189',\r\n      'status': 3,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3245558&buildTypeId=ApiTests',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'UnitTestIntegration780|7.16.1.1618 ProductBase Softkey ENU',\r\n      'name': 'Integration (MSSQL)|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / C# / Core',\r\n      'number': '7.16.1.1618 ProductBase Softkey ENU',\r\n      'status': 2,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3243952&buildTypeId=UnitTestIntegration780',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'DotNetOracleIntegrationTests|7.16.1.1618 ProductBase Softkey ENU',\r\n      'name': 'Integration (Oracle)|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / C# / Core',\r\n      'number': '7.16.1.1618 ProductBase Softkey ENU',\r\n      'status': 2,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3243739&buildTypeId=DotNetOracleIntegrationTests',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'IntegrationPostgreSQL|7.16.1.1617 ProductBase Softkey ENU',\r\n      'name': 'Integration (PostgreSQL)|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / C# / Core',\r\n      'number': '7.16.1.1617 ProductBase Softkey ENU',\r\n      'status': 2,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3243801&buildTypeId=IntegrationPostgreSQL',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'Team_Platform_ThirdWaveRiders_Custom_NetCoreAppCCoreUnitTests_2|868',\r\n      'name': 'Core Unit (.Net Core 3.1)|trunk',\r\n      'projectName': 'Team / Third Wave Riders / Custom',\r\n      'number': '868',\r\n      'status': 3,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3243336&buildTypeId=Team_Platform_ThirdWaveRiders_Custom_NetCoreAppCCoreUnitTests_2',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n]"
            },
            {
                "name": "SampleBuildServer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/samples/sample-build-server.ts",
                "type": "object",
                "defaultValue": "{\r\n  'type': 'teamCity',\r\n  'name': 'testServer',\r\n  'url': 'http://localhost:8111',\r\n  'guestLogin': true,\r\n  'login': '',\r\n  'password': '',\r\n  'accessToken': '',\r\n  'checkIntervalSeconds': 30\r\n}"
            },
            {
                "name": "SampleProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/samples/sample-profile.ts",
                "type": "object",
                "defaultValue": "{\r\n  'screens': [\r\n    {\r\n      'type': 'buildStatus',\r\n      'displayTime': 60,\r\n      'builds': [\r\n        {\r\n          'buildServer': 'testServer',\r\n          'config': {\r\n            'buildIds': [\r\n              'BuildMonitor_TestSuccess',\r\n              'BuildMonitor_TestRunning',\r\n              'BuildMonitor_TestFail'\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
            }
        ],
        "functions": [
            {
                "name": "getBaseUrl",
                "file": "src/main.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "BuildServerType",
                "childs": [
                    {
                        "name": "TeamCity",
                        "value": "teamCity"
                    },
                    {
                        "name": "Jenkins",
                        "value": "jenkins"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/data-contracts.ts"
            },
            {
                "name": "BuildStatus",
                "childs": [
                    {
                        "name": "Undefined"
                    },
                    {
                        "name": "Running"
                    },
                    {
                        "name": "Success"
                    },
                    {
                        "name": "Failed"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/data-contracts.ts"
            },
            {
                "name": "BuildViewType",
                "childs": [
                    {
                        "name": "Unknown"
                    },
                    {
                        "name": "TeamCity"
                    },
                    {
                        "name": "Jenkins"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/data-contracts.ts"
            },
            {
                "name": "ScreenType",
                "childs": [
                    {
                        "name": "BuildInfo"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/data-contracts.ts"
            }
        ],
        "groupedVariables": {
            "src/app/build-server-list/build-server-list.stories.ts": [
                {
                    "name": "buildServers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/build-server-list/build-server-list.stories.ts",
                    "type": "BuildServer[]",
                    "defaultValue": "[\r\n  <BuildServer>{description: \"Core\", config: {name: \"1\", type: BuildServerType.TeamCity}},\r\n  <BuildServer>{description: \"Core 1\", config: {name: \"2\", type: BuildServerType.TeamCity}},\r\n  <BuildServer>{description: \"some\", config: {name: \"3\", type: BuildServerType.TeamCity}},\r\n  <BuildServer>{description: \"asdsad\", config: {name: \"4\", type: BuildServerType.TeamCity}}\r\n]"
                },
                {
                    "name": "router",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/build-server-list/build-server-list.stories.ts",
                    "type": "",
                    "defaultValue": "RouterTestingModule.withRoutes(\r\n  [{path: '**', component: BuildServerListComponent}],\r\n)"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  signalRBaseUrl: '/signalR'\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  signalRBaseUrl: '/signalR'\r\n}"
                }
            ],
            "src/app/profile-list/profile-list.stories.ts": [
                {
                    "name": "profiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile-list/profile-list.stories.ts",
                    "type": "Profile[]",
                    "defaultValue": "[\r\n  <Profile>{name: 'Hydrogen', description: \"Core\", public: true, config: {}},\r\n  <Profile>{name: 'Helium', description: \"Core 1\", config: {}}\r\n]"
                },
                {
                    "name": "router",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile-list/profile-list.stories.ts",
                    "type": "",
                    "defaultValue": "RouterTestingModule.withRoutes(\r\n  [{path: '**', component: ProfileListComponent}]\r\n)"
                }
            ],
            "src/main.ts": [
                {
                    "name": "providers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\r\n]"
                }
            ],
            "src/app/build-server-edit/build-server-edit.stories.ts": [
                {
                    "name": "router",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/build-server-edit/build-server-edit.stories.ts",
                    "type": "",
                    "defaultValue": "RouterTestingModule.withRoutes(\r\n  [{path: '**', component: BuildServerEditComponent}]\r\n)"
                }
            ],
            "src/app/profile-edit/profile-edit.stories.ts": [
                {
                    "name": "router",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile-edit/profile-edit.stories.ts",
                    "type": "",
                    "defaultValue": "RouterTestingModule.withRoutes(\r\n  [{path: '**', component: ProfileEditComponent}]\r\n)"
                }
            ],
            "src/app/samples/sample-builds.ts": [
                {
                    "name": "SampleBuilds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/samples/sample-builds.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'CsConfigurationUnitTestsDbUpdate|0.0.0.0',\r\n      'name': 'Unit (Diagnostic SE_M_SE)|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / C# / Configuration',\r\n      'number': '0.0.0.0',\r\n      'status': 2,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3245893&buildTypeId=CsConfigurationUnitTestsDbUpdate',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'CoreJsIntegrationTests|4594',\r\n      'name': 'Integration|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / JS / Core',\r\n      'number': '4594',\r\n      'status': 3,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3245904&buildTypeId=CoreJsIntegrationTests',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'JsCoreUnitTestsKarma|831',\r\n      'name': 'JS Core Unit/UI Tests Karma|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / JS / Core',\r\n      'number': '831',\r\n      'status': 2,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3245903&buildTypeId=JsCoreUnitTestsKarma',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'ConfigurationUnitTest780|7509',\r\n      'name': 'Configuration|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / JS / Configuration',\r\n      'number': '7509',\r\n      'status': 3,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3245846&buildTypeId=ConfigurationUnitTest780',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'ApiTests|4189',\r\n      'name': 'API Tests|trunk',\r\n      'projectName': 'Continuous Integration / API Tests',\r\n      'number': '4189',\r\n      'status': 3,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3245558&buildTypeId=ApiTests',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'UnitTestIntegration780|7.16.1.1618 ProductBase Softkey ENU',\r\n      'name': 'Integration (MSSQL)|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / C# / Core',\r\n      'number': '7.16.1.1618 ProductBase Softkey ENU',\r\n      'status': 2,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3243952&buildTypeId=UnitTestIntegration780',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'DotNetOracleIntegrationTests|7.16.1.1618 ProductBase Softkey ENU',\r\n      'name': 'Integration (Oracle)|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / C# / Core',\r\n      'number': '7.16.1.1618 ProductBase Softkey ENU',\r\n      'status': 2,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3243739&buildTypeId=DotNetOracleIntegrationTests',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'IntegrationPostgreSQL|7.16.1.1617 ProductBase Softkey ENU',\r\n      'name': 'Integration (PostgreSQL)|trunk',\r\n      'projectName': 'Continuous Integration / Unit Tests / C# / Core',\r\n      'number': '7.16.1.1617 ProductBase Softkey ENU',\r\n      'status': 2,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3243801&buildTypeId=IntegrationPostgreSQL',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    'viewType': 1,\r\n    'config': {\r\n      'id': 'Team_Platform_ThirdWaveRiders_Custom_NetCoreAppCCoreUnitTests_2|868',\r\n      'name': 'Core Unit (.Net Core 3.1)|trunk',\r\n      'projectName': 'Team / Third Wave Riders / Custom',\r\n      'number': '868',\r\n      'status': 3,\r\n      'url': 'http://tsbuild-app-03/viewLog.html?buildId=3243336&buildTypeId=Team_Platform_ThirdWaveRiders_Custom_NetCoreAppCCoreUnitTests_2',\r\n      'changes': [\r\n        {\r\n          'author': {\r\n            'name': 'v.artemchuk',\r\n            'avatarImage': ''\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n]"
                }
            ],
            "src/app/samples/sample-build-server.ts": [
                {
                    "name": "SampleBuildServer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/samples/sample-build-server.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  'type': 'teamCity',\r\n  'name': 'testServer',\r\n  'url': 'http://localhost:8111',\r\n  'guestLogin': true,\r\n  'login': '',\r\n  'password': '',\r\n  'accessToken': '',\r\n  'checkIntervalSeconds': 30\r\n}"
                }
            ],
            "src/app/samples/sample-profile.ts": [
                {
                    "name": "SampleProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/samples/sample-profile.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  'screens': [\r\n    {\r\n      'type': 'buildStatus',\r\n      'displayTime': 60,\r\n      'builds': [\r\n        {\r\n          'buildServer': 'testServer',\r\n          'config': {\r\n            'buildIds': [\r\n              'BuildMonitor_TestSuccess',\r\n              'BuildMonitor_TestRunning',\r\n              'BuildMonitor_TestFail'\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/main.ts": [
                {
                    "name": "getBaseUrl",
                    "file": "src/main.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/data-contracts.ts": [
                {
                    "name": "BuildServerType",
                    "childs": [
                        {
                            "name": "TeamCity",
                            "value": "teamCity"
                        },
                        {
                            "name": "Jenkins",
                            "value": "jenkins"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/data-contracts.ts"
                },
                {
                    "name": "BuildStatus",
                    "childs": [
                        {
                            "name": "Undefined"
                        },
                        {
                            "name": "Running"
                        },
                        {
                            "name": "Success"
                        },
                        {
                            "name": "Failed"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/data-contracts.ts"
                },
                {
                    "name": "BuildViewType",
                    "childs": [
                        {
                            "name": "Unknown"
                        },
                        {
                            "name": "TeamCity"
                        },
                        {
                            "name": "Jenkins"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/data-contracts.ts"
                },
                {
                    "name": "ScreenType",
                    "childs": [
                        {
                            "name": "BuildInfo"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/data-contracts.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/base-build-info/base-build-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseBuildInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/build-date-info/build-date-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BuildDateInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/build-screen/build-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BuildScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/build-server-edit/build-server-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BuildServerEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/build-server-edit/build-server-edit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "router",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/build-server-list/build-server-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BuildServerListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/build-server-list/build-server-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buildServers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/build-server-list/build-server-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "router",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseConfigItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BuildData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BuildInfo",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BuildScreenData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BuildServer",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Change",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Profile",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Screen",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TcBuildInfo",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/data-contracts.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IScreenData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data-services/base-crud.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseCrudService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/data-services/base-crud.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICrudService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/data-services/build-server.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BuildServerService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/data-services/profile-info.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileInfoService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/data-services/profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/data-services/ui-crud-service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UICrudService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/data-services/uibuild-server.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UIBuildServerService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/data-services/uiprofile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UIProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/fetch-data/fetch-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FetchDataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/fetch-data/fetch-data.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WeatherForecast",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/nav-menu/nav-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/profile-edit/profile-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/profile-edit/profile-edit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "router",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile-list/profile-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/profile-list/profile-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "profiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile-list/profile-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "router",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/samples/sample-build-server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SampleBuildServer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/samples/sample-builds.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SampleBuilds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/samples/sample-profile.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SampleProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/schema.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SchemaService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/screen-list/screen-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/signalR/signalR-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SignalRService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/tc-build-info/tc-build-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TcBuildInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/uiutils.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UIUtils",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getBaseUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "providers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}